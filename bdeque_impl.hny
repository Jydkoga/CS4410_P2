import synch


# Bdeque(n): returns the initial value of an empty bdeque with at most n elements.
def Bdeque(n) returns empty:
  empty = {.bdeque: [None,] * n, .lock: Lock(), .put_cond: Condition(), .get_cond: Condition(),.peek_cond: Condition(), .left: 0, .right: 0, .size: n, .elems:0}

# put left(d, v): d points to a bdeque and v is some value. Put v at the left-end of the bdeque. Does not return a value. Should block if the bdeque is full.
def put_left(d, v):
  acquire(?d->lock)

  while d->elems == d->size:
    wait(?d->put_cond,?d->lock)
  
  
  if d->elems > 0:
    d->left = ((d->left)-1) % d->size
  d->bdeque[d->left] = v
  d->elems +=1
  notify(?d->get_cond)
  notifyAll(?d->peek_cond)
  release(?d->lock)
  



# put right(d, v): d points to a bdeque and v is some value. Put v at the right-end of the bdeque. Does not return a value. Should block if the bdeque is full.
#def put_right(d, v):
  

# get left(d): d points to a bdeque. If the bdeque is empty, the operation should wait. Otherwise it should remove and return the value at the left-end of the bdeque.
#def get_left(d) returns val:
  

# get right(d): d points to a bdeque. If the bdeque is empty, the operation should wait. Otherwise it should remove and return the value at the right-end of the bdeque.
#def get_right(d) returns val:
  

# peek left(d): d points to a bdeque. If the bdeque is empty, the operation should wait. Otherwise it should return the value at the left-end of the bdeque.
#def peek_left(d) returns val:
  

# peek right(d): d points to a bdeque. If the bdeque is empty, the operation should wait. Otherwise it should return the value at the right-end of the bdeque.
#def peek_right(d) returns val:
  